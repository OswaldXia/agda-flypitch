{-# OPTIONS --cubical --safe #-}

open import CubicalExt.Axiom.ExcludedMiddle
module FOL.Language.Homomorphism ‚¶É em : EM ‚¶Ñ {u} where
open import FOL.Language ‚¶É em ‚¶Ñ hiding (u)

open import Cubical.Core.Primitives using (Type)
open import Cubical.Data.Equality using (funExt)
open import CubicalExt.HITs.SetTruncation using (map)
open import CubicalExt.Foundations.Powerset* using (_‚ü¶_‚üß)

open import Data.Nat using (‚Ñï)
open import Function using (_$_; _‚àò‚ÇÇ_) renaming (id to ‚ü®id‚ü©; _‚àò_ to _‚ü®‚àò‚ü©_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; cong‚ÇÇ)

private variable
  ‚Ñí‚ÇÅ ‚Ñí‚ÇÇ ‚Ñí‚ÇÉ ‚Ñí‚ÇÑ : Language
  n l : ‚Ñï

record _‚ü∂_ (‚Ñí‚ÇÅ : Language) (‚Ñí‚ÇÇ : Language) : Type u where
  constructor ‚ü™_,_‚ü´
  open Language {u}
  field
    funMorph : ‚àÄ {n} ‚Üí ‚Ñí‚ÇÅ .ùîâ n ‚Üí ‚Ñí‚ÇÇ .ùîâ n
    relMorph : ‚àÄ {n} ‚Üí ‚Ñí‚ÇÅ .‚Ñú n ‚Üí ‚Ñí‚ÇÇ .‚Ñú n

id : ‚Ñí ‚ü∂ ‚Ñí
id = ‚ü™ ‚ü®id‚ü© , ‚ü®id‚ü© ‚ü´

_‚àò_ : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ ‚Üí ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ ‚Üí ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÉ
F ‚àò G = ‚ü™ F .funMorph ‚ü®‚àò‚ü© G .funMorph , F .relMorph ‚ü®‚àò‚ü© G .relMorph ‚ü´ where open _‚ü∂_

module _ where
  open _‚ü∂_

  homExt : {F G : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ} ‚Üí (Œª {n} ‚Üí funMorph F {n}) ‚â° funMorph G ‚Üí (Œª {n} ‚Üí relMorph F {n}) ‚â° relMorph G ‚Üí F ‚â° G
  homExt funMorphEq relMorphEq = cong‚ÇÇ ‚ü™_,_‚ü´ funMorphEq relMorphEq

  funMorph-‚àò : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) (n : ‚Ñï) ‚Üí funMorph (G ‚àò F) {n} ‚â° funMorph G ‚ü®‚àò‚ü© funMorph F
  funMorph-‚àò G F n = refl

  relMorph-‚àò : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) (n : ‚Ñï) ‚Üí relMorph (G ‚àò F) {n} ‚â° relMorph G ‚ü®‚àò‚ü© relMorph F
  relMorph-‚àò G F n = refl

module Bounded (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) where
  open import FOL.Bounded.Base {u} hiding (l)
  open import FOL.Syntactics ‚¶É em ‚¶Ñ using (Theory)
  open _‚ü∂_ {‚Ñí‚ÇÅ} {‚Ñí‚ÇÇ} F

  termMorph : Term‚Çó ‚Ñí‚ÇÅ n l ‚Üí Term‚Çó ‚Ñí‚ÇÇ n l
  termMorph (var k)     = var k
  termMorph (func f)    = func (funMorph f)
  termMorph (app t‚ÇÅ t‚ÇÇ) = app (termMorph t‚ÇÅ) (termMorph t‚ÇÇ)

  formulaMorph : Formula‚Çó ‚Ñí‚ÇÅ n l ‚Üí Formula‚Çó ‚Ñí‚ÇÇ n l
  formulaMorph ‚ä•          = ‚ä•
  formulaMorph (rel R)    = rel (relMorph R)
  formulaMorph (app·µ£ œÜ t) = app·µ£ (formulaMorph œÜ) (termMorph t)
  formulaMorph (t‚ÇÅ ‚âà t‚ÇÇ)  = termMorph t‚ÇÅ ‚âà termMorph t‚ÇÇ
  formulaMorph (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)  = formulaMorph œÜ‚ÇÅ ‚áí formulaMorph œÜ‚ÇÇ
  formulaMorph (‚àÄ' œÜ)     = ‚àÄ' formulaMorph œÜ

  closedTermMorph : ClosedTerm ‚Ñí‚ÇÅ ‚Üí ClosedTerm ‚Ñí‚ÇÇ
  closedTermMorph = termMorph

  sentenceMorph : Sentence ‚Ñí‚ÇÅ ‚Üí Sentence ‚Ñí‚ÇÇ
  sentenceMorph = formulaMorph

  theoryMorph : Theory ‚Ñí‚ÇÅ ‚Üí Theory ‚Ñí‚ÇÇ
  theoryMorph Œì = sentenceMorph ‚ü¶ Œì ‚üß

module BoundedProperties where
  open import FOL.Bounded.Base {u} hiding (l)
  open Bounded

  termMorphId : (t : Term‚Çó ‚Ñí‚ÇÅ n l) ‚Üí termMorph id t ‚â° t
  termMorphId (var k) = refl
  termMorphId (func f) = refl
  termMorphId (app t‚ÇÅ t‚ÇÇ) = cong‚ÇÇ app (termMorphId t‚ÇÅ) (termMorphId t‚ÇÇ)

  termMorphCompApp : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) ‚Üí (t : Term‚Çó ‚Ñí‚ÇÅ n l) ‚Üí
    termMorph (G ‚àò F) t ‚â° termMorph G (termMorph F t)
  termMorphCompApp G F (var k) = refl
  termMorphCompApp G F (func f) = refl
  termMorphCompApp G F (app t‚ÇÅ t‚ÇÇ)
    rewrite termMorphCompApp G F t‚ÇÅ
          | termMorphCompApp G F t‚ÇÇ = refl

  termMorphComp : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) ‚Üí
    termMorph (G ‚àò F) {n} {l} ‚â° termMorph G ‚ü®‚àò‚ü© termMorph F
  termMorphComp = funExt ‚àò‚ÇÇ termMorphCompApp

  formulaMorphCompApp : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) ‚Üí (œÜ : Formula‚Çó ‚Ñí‚ÇÅ n l) ‚Üí
    formulaMorph (G ‚àò F) œÜ ‚â° (formulaMorph G ‚ü®‚àò‚ü© formulaMorph F) œÜ
  formulaMorphCompApp G F ‚ä• = refl
  formulaMorphCompApp G F (rel R) = refl
  formulaMorphCompApp G F (app·µ£ œÜ t)
    rewrite formulaMorphCompApp G F œÜ
          | termMorphCompApp G F t = refl
  formulaMorphCompApp G F (t‚ÇÅ ‚âà t‚ÇÇ)
    rewrite termMorphCompApp G F t‚ÇÅ
          | termMorphCompApp G F t‚ÇÇ = refl
  formulaMorphCompApp G F (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)
    rewrite formulaMorphCompApp G F œÜ‚ÇÅ
          | formulaMorphCompApp G F œÜ‚ÇÇ = refl
  formulaMorphCompApp G F (‚àÄ' œÜ)
    rewrite formulaMorphCompApp G F œÜ = refl

  formulaMorphComp : (G : ‚Ñí‚ÇÇ ‚ü∂ ‚Ñí‚ÇÉ) (F : ‚Ñí‚ÇÅ ‚ü∂ ‚Ñí‚ÇÇ) ‚Üí
    formulaMorph (G ‚àò F) {n} {l} ‚â° formulaMorph G ‚ü®‚àò‚ü© formulaMorph F
  formulaMorphComp = funExt ‚àò‚ÇÇ formulaMorphCompApp
