{-# OPTIONS --cubical --safe #-}
{-# OPTIONS --lossy-unification #-}

open import FOL.Language
open import FOL.Bounded.Syntactics using (Theory)
open import FOL.Bounded.PropertiesOfTheory using (complete; hasEnoughConstants)
module FOL.Constructions.TermModel.Properties {‚Ñí : Language {u}} {T : Theory ‚Ñí}
  (H‚ÇÅ : complete ‚Ñí T) (H‚ÇÇ : hasEnoughConstants ‚Ñí T) where
open Language ‚Ñí

open import FOL.Bounded.Base ‚Ñí
open import FOL.Bounded.Syntactics ‚Ñí
open import FOL.Bounded.Semantics ‚Ñí
open import FOL.Constructions.Equivalence.BoundedTruncated T

import FOL.Base ‚Ñí as Free
open Free.Formula‚Çó

open import FOL.Constructions.TermModel.Base T
open TermModel using (nonempty; preFunc; preRel; preFunc-pointwiseEq; preRel-pointwiseIff)

open import FOL.Structure.Base using (Structure)
open Structure termModel using (Domain; relMap)

open import Cubical.Foundations.Prelude renaming (_,_ to infix 5 _,_)
open import Cubical.Foundations.HLevels using (isSetHProp)
open import Cubical.Foundations.Structure using (‚ü®_‚ü©)
open import CubicalExt.Foundations.Powerset* using (_‚àà_)
open import Cubical.Functions.Logic using (‚à•_‚à•‚Çö)
open import CubicalExt.Functions.Logic.Iff
open import CubicalExt.Data.Vec using (quotientBeta)
open import Cubical.HITs.SetQuotients using ([_]; eq/; squash/; effective)
open import Cubical.HITs.PropositionalTruncation using (‚à£_‚à£‚ÇÅ; squash‚ÇÅ; elim)

open import Data.Nat
open import Data.Nat.Properties using (‚â§-refl)
open import Data.Vec using (Vec; []; _‚à∑_; map)
open import Function using (_‚àò_; _‚àò‚ÇÇ_; _$_)
open import Relation.Binary.PropositionalEquality
  using () renaming (subst to substEq; sym to symEq)

private variable
  n : ‚Ñï

module _ where
  open PreRealizer termModel

  ‚â°preFunc : (f : ClosedTerm‚Çó l) (xs : Vec ClosedTerm l) ‚Üí
    realize‚Çú [] f (map [_] xs) ‚â° preFunc f xs
  ‚â°preFunc (func f) = quotientBeta ‚âã-refl squash/ (preFunc (func f)) (preFunc-pointwiseEq (func f))
  ‚â°preFunc (app t‚ÇÅ t‚ÇÇ) xs =
    realize‚Çú [] t‚ÇÅ (realize‚Çú [] t‚ÇÇ [] ‚à∑ map [_] xs) ‚â°‚ü® cong (Œª x ‚Üí realize‚Çú [] t‚ÇÅ (x ‚à∑ _)) (‚â°preFunc t‚ÇÇ []) ‚ü©
    realize‚Çú [] t‚ÇÅ ([ t‚ÇÇ ] ‚à∑ map [_] xs)            ‚â°‚ü®‚ü©
    realize‚Çú [] t‚ÇÅ (map [_] (t‚ÇÇ ‚à∑ xs))              ‚â°‚ü® ‚â°preFunc t‚ÇÅ (t‚ÇÇ ‚à∑ xs) ‚ü©
    [ apps t‚ÇÅ (t‚ÇÇ ‚à∑ xs)]                            ‚àé

  realizeApps·µ£‚Üî : (ùìã : Vec Domain n) (r : Formula‚Çó n l) (xs : Vec (Term n) l) ‚Üí
    realize ùìã (apps·µ£ r xs) [] ‚Üî realize ùìã r (map (Œª t ‚Üí realize‚Çú ùìã t []) xs)
  realizeApps·µ£‚Üî ùìã r [] = ‚Üî-refl
  realizeApps·µ£‚Üî ùìã r (x ‚à∑ xs) = realizeApps·µ£‚Üî ùìã (app·µ£ r x) xs

module _ where
  open ClosedRealizer termModel

  ‚â°preRel : (R : ‚Ñú l) (xs : Vec ClosedTerm l) ‚Üí
    relMap R (map [_] xs) ‚â° preRel (rel R) xs , squash‚ÇÅ
  ‚â°preRel R = quotientBeta ‚âã-refl isSetHProp _
    Œª x ‚Üí hPropExt $ preRel-pointwiseIff (rel R) x

  ‚â°[] : (t : ClosedTerm) ‚Üí realize‚Çú t ‚â° [ t ]
  ‚â°[] t = ‚â°preFunc t []

  ‚â°map[] : (xs : Vec ClosedTerm l) ‚Üí map realize‚Çú xs ‚â° map [_] xs
  ‚â°map[] [] = refl
  ‚â°map[] (x ‚à∑ xs) = cong‚ÇÇ _‚à∑_ (‚â°[] x) (‚â°map[] xs)

open ClosedRealizer termModel

hPropEqual : (œÜ : Sentence‚Çó l) (xs : Vec ClosedTerm l) ‚Üí
  count‚àÄ œÜ < n ‚Üí ‚à• T ‚ä¢ apps·µ£ œÜ xs ‚à•‚Çö ‚â° termModel ‚ä®À¢ apps·µ£ œÜ xs , isProp-‚ä®À¢ _ _
hPropEqual {0} {suc n} ‚ä• [] _ = hPropExt $
  ‚Üí: elim (Œª _ ‚Üí isProp-‚ä®À¢ termModel ‚ä•) (lift ‚àò H‚ÇÅ .fst)
  ‚Üê: Œª ()
hPropEqual {l} {suc n} (rel R) xs H = sym $
  termModel ‚ä®À¢ apps·µ£ (rel R) xs , _ ‚â°‚ü® hPropExt $ realizeApps·µ£‚Üî [] (rel R) _ ‚ü©
  relMap R (map realize‚Çú xs)        ‚â°‚ü® cong (relMap R) (‚â°map[] _) ‚ü©
  relMap R (map [_] xs)             ‚â°‚ü® ‚â°preRel _ _ ‚ü©
  preRel (rel R) xs , squash‚ÇÅ       ‚â°‚ü®‚ü©
  ‚à• T ‚ä¢ apps·µ£ (rel R) xs ‚à•‚Çö         ‚àé
hPropEqual {l} {suc n} (app·µ£ œÜ t) xs H with (unbound œÜ) in eq
... | rel _    = hPropEqual œÜ (t ‚à∑ xs) $ substEq (Œª œÜ ‚Üí Free.count‚àÄ œÜ < suc n) (symEq eq) H
... | app·µ£ _ _ = hPropEqual œÜ (t ‚à∑ xs) $ substEq (Œª œÜ ‚Üí Free.count‚àÄ œÜ < suc n) (symEq eq) H
hPropEqual {0} {suc n} (t‚ÇÅ ‚âà t‚ÇÇ) [] H = hPropExt $
  T ‚ä¶ t‚ÇÅ ‚âà t‚ÇÇ               ‚Üî‚ü® ‚Üí: eq/ _ _ ‚Üê: effective isPropValued‚âã isEquivRel‚âã _ _ ‚ü©
  [ t‚ÇÅ ] ‚â° [ t‚ÇÇ ]           ‚Üî‚â°‚ü® subst2 (Œª x y ‚Üí (x ‚â° y) ‚â° (realize‚Çú t‚ÇÅ ‚â° realize‚Çú t‚ÇÇ)) (‚â°[] t‚ÇÅ) (‚â°[] t‚ÇÇ) refl ‚ü©
  realize‚Çú t‚ÇÅ ‚â° realize‚Çú t‚ÇÇ ‚Üî‚ü®‚ü©
  termModel ‚ä®À¢ t‚ÇÅ ‚âà t‚ÇÇ      ‚Üî‚àé
hPropEqual {0} {suc n} (œÜ ‚áí œÜ‚ÇÅ) xs H = {!   !}
hPropEqual {0} {suc n} (‚àÄ' œÜ) xs H = {!   !}

termModelComplete : (œÜ : Sentence‚Çó l) (xs : Vec ClosedTerm l) ‚Üí
  T ‚ä¶ apps·µ£ œÜ xs ‚Üî termModel ‚ä®À¢ apps·µ£ œÜ xs
termModelComplete œÜ xs = hPropExt‚Åª $ hPropEqual œÜ xs (s‚â§s ‚â§-refl)

termModelWellDefined : termModel ‚ä®·µÄ T
termModelWellDefined œÜ œÜ‚ààT = to (termModelComplete œÜ []) ‚à£ axiom œÜ‚ààT ‚à£‚ÇÅ

-- completeness for complete theories with enough constanxs
open Implication (‚Ñì-suc u) using (_‚ä®_)
completeness : (œÜ : Sentence) ‚Üí T ‚ä® œÜ ‚Üí T ‚ä¶ œÜ
completeness œÜ T‚ä®œÜ = from (termModelComplete œÜ []) $
  T‚ä®œÜ termModel (nonempty H‚ÇÇ) termModelWellDefined
